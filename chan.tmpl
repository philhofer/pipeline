{{define "MergeT"}}// Merge merges multiple channels into one
func Merge{{.Esc}}(v ...<-chan {{.}}) <-chan {{.}} {
	wg := new(sync.WaitGroup)
	out := make(chan {{.}})
	for _, c := range v {
		wg.Add(1)
		go func(c <-chan {{.}}) {
			for e := range c {
				out <- e
			}
			wg.Done()
		}(c)
	}
	go func() {
		wg.Wait()
		close(out)
	}()
	return out
}{{end}}

{{define "FanoutT"}}// Fanout splits one channel into 'n' channels
func Fanout{{.Esc}}(v <-chan {{.}}, n int) []<-chan {{.}} {
	out := make([]<-chan {{.}}, 0, n)
	for i := 0; i < n; i++ {
		local := make(chan {{.}})
		go func(c <-chan {{.}}, i int, out chan {{.}}) {
			for e := range c {
				out <- e
			}
			close(out)
		}(v, i, local)
		out = append(out, local)
	}
	return out
}{{end}}

{{define "ApplyT"}}// Apply applies 'fs' successively to each element of a channel
// and sends the the object to the output channel.
func Apply{{.Esc}}(v <-chan {{.}}, fs ...func({{.}})) <-chan {{.}} {
	out := make(chan {{.}})
	go func() {
		for e := range v {
			for _, f := range fs {
				f(e)
			}
			out <- e
		}
		close(out)
	}()
	return out
}{{end}}

{{define "PapplyT"}}// Papply applies 'fs' successively to each element received on 'v' and
// sends the object along to the output channel. 'n' goroutines
// are used for processing.
func Papply{{.Esc}}(v <-chan {{.}}, n int, fs ...func({{.}})) <-chan {{.}} {
	out := make(chan {{.}})
	wg := new(sync.WaitGroup)
	wg.Add(n)
	for i := 0; i < n; i++ {
		go func() {
			for e := range v {
				for _, f := range fs {
					f(e)
				}
				out <- e
			}
		}()
	}
	go func() {
		wg.Wait()
		close(out)
	}()
	return out
}{{end}}

{{define "MapT"}}// Map applies 'fs' successively to each element read from
// 'v' and sends them to the output channel.
func Map{{.Esc}}(v <-chan {{.}}, fs ...func({{.}}) {{.}}) <-chan {{.}} {
	out := make(chan {{.}})
	go func() {
		for e := range v {
			for _, f := range fs {
				e = f(e)
			}
			out <- e
		}
		close(out)
	}()
	return out
}{{end}}

{{define "PmapT"}}// Pmap applies 'fs' successively to elements read from 'v' and
// sends the result to the output channel. 'n' goroutines are used
// for processing.
func Pmap{{.Esc}}(v <-chan {{.}}, n int, fs ...func({{.}}) {{.}}) <-chan {{.}} {
	out := make(chan {{.}})
	wg := new(sync.WaitGroup)
	wg.Add(n)
	for i := 0; i < n; i++ {
		go func() {
			for e := range v {
				for _, f := range fs {
					e = f(e)
				}
				out <- e
			}
			wg.Done()
		}()
	}
	go func() {
		wg.Wait()
		close(out)
	}()
	return out
}{{end}}

{{define "FilterT"}}// Filter filters the input channel using 'f'. Only elements
// for which f({{.}}) evaluates to 'true' will appear on the output channel.
func Filter{{.Esc}}(v <-chan {{.}}, f func({{.}}) bool) <-chan {{.}} {
	out := make(chan {{.}})
	go func() {
		for e := range v {
			if f(e) {
				out <- e
			}
		}
		close(out)
	}()
	return out
}{{end}}

{{define "TransformT"}}// Transform transforms elements from 'v' from {{.Src}} to {{.Dst}} using
// 'f' and sends them on the output channel.
func Transform{{.Esc}}(v <-chan {{.Src}}, f func({{.Src}}) {{.Dst}}) <-chan {{.Dst}} {
	out := make(chan {{.Dst}})
	go func() {
		for e := range v {
			out <- f(e)
		}
		close(out)
	}()
	return out
}{{end}}

{{define "PtransformT"}}// Ptransform performs Transform{{.Esc}}() in parallel using 'n' goroutines.
func Ptransform{{.Esc}}(v <-chan {{.Src}}, f func({{.Src}}) {{.Dst}}, n int) <-chan {{.Dst}} {
	out := make(chan {{.Dst}})
	wg := new(sync.WaitGroup)
	wg.Add(n)
	for i := 0; i < n; i++ {
		go func() {
			for e := range v {
				out <- f(e)
			}
			wg.Done()
		}()
	}
	go func() {
		wg.Wait()
		close(out)
	}()
	return out
}{{end}}

{{define "SendAllT"}}// SendAll sends a slice sequentially over a channel
func SendAll{{.Esc}}(in []{{.}}) <-chan {{.}} {
	out := make(chan {{.}})
	go func() {
		for i := range in {
			out <- in[i]
		}
	}()
	return out
}{{end}}

{{define "RecvAllT"}}// RecvAll collects every element sent on the
// input channel into a slice. It blocks until the input channel is closed.
func RecvAll{{.Esc}}(in <-chan {{.}}) []{{.}} {
	out := make([]{{.}}, 0, 50)
	for e := range in {
		out = append(out, e)
	}
	return out
}{{end}}

{{define "RecvNT"}}// RecvN pulls 'n' elements out of 'in' and returns a slice
// of those elements. The length of the output slice may be less than 'n' if
// the channel was closed before 'n' elements were collected.
func RecvN{{.Esc}}(in <-chan {{.}}, n int) []{{.}} {
	ot := make([]{{.}}, 0, n)
	for i := 0; i < n; i++ {
		ot = append(ot, <-in)
	}
	return ot
}{{end}}

{{define "BufferT"}}// Buffer reads elements from 'in' and attempts to send them
// to 'out'. If the send would block, the messages are buffered
// internally. Buffer closes 'out' after 't' is closed. Buffer() blocks
// until 'in' is closed, so in most cases it should be run asynchronously. Buffer uses
// a LIFO queue, so it should only be used in cases where ordering doesn't matter.
func Buffer{{.Esc}}(in <-chan {{.}}, out chan<- {{.}}) {
	var buf []{{.}}
	for {
		if len(buf) > 0 {
			select {
			case v, ok := <-in:
				if !ok {
					// flush everything
					for i := range buf {
						out <- buf[i]
					}
					break
				}
				select {
				case out <- v:
					continue
				default:
					buf = append(buf, v)
					continue
				}
			case out <- buf[len(buf)-1]:
				buf = buf[:len(buf)-1]
				continue
			}
		} else {
			select {
			case v, ok := <-in:
				if !ok {
					break
				}
				select {
				case out <- v:
					continue
				default:
					buf = append(buf, v)
					continue
				}
			}
		}
	}
	close(out)
}{{end}}